<?php

/**
 * @file
 * Install, update and uninstall functions for the profile module.
 */

/**
 * Implements hook_install().
 */
function profile_install() {
}


/**
 * Implements hook_schema().
 */
function profile_schema() {
  $schema['profile'] = array(
    'description' => 'Stores profile items.',
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique profile item ID.',
      ),
      'type' => array(
        'description' => 'The {profile_type}.type of this profile.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => "The {users}.uid of the associated user.",
      ),
      'label' => array(
        'description' => 'A human-readable label for this profile.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the profile was created.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the profile was most recently saved.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'type' => array(
        'table' => 'profile_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('pid'),
  );

  return $schema;
}


/**
 * Implements hook_uninstall().
 */
function profile_uninstall() {
  $config_names = config_get_names_with_prefix('profile');
  foreach ($config_names as $config_file) {
    $config = config($config_file);
    $type = $config->get('type');
    field_attach_delete_bundle('profile', $type);
  }
}


/**
 * Implements hook_requirements().
 *
 * This is here to deal with an update numbering problem in early versions of
 * this module (updates started numbering at 10000, not 1000). If the wrong
 * number is detected for the last update version, we fix it so that updates
 * proceed properly going forward.
 */
function profile_requirements($phase) {
  if ($phase == 'update' || $phase == 'runtime') {
    if (backdrop_get_installed_schema_version('profile') == 10000) {
      backdrop_set_installed_schema_version('profile', 1000);
    }
  }
  return array();
}


/**
 * Implements hook_update_dependencies().
 *
 * Make sure field module has already created the config files before running
 * update 1001.
 *
 * @see field_update_1001().
 */
function profile_update_dependencies() {
  $dependencies['profile'][1001] = array(
      'field' => 1001,
    );
}


/**
 * Initialize the profile settings to use fieldsets.
 */
function profile_update_1000() {
  config_set('profile.settings', 'profile_display', 'fieldsets');
}


/**
 * Migrate any existing Profile2 profiles into this module.
 */
function profile_update_1001() {
  if (!db_table_exists('profile_type')) {
    return;
  }

  // Get Profile2 types from the table left behind in the db.
    $profile2_types = db_query('
    SELECT *
    FROM {profile_type}
    ')
    ->fetchAllAssoc('id', PDO::FETCH_ASSOC);

  // Create profile.type config files for each type.
  foreach ($profile2_types as &$type) {
    $type['data'] = unserialize($type['data']);
    if (isset($type['data']['roles'])) {
      // Authenticated role changes its key in Backdrop.
      if (isset($type['data']['roles']['2'])) {
        unset($type['data']['roles']['2']);
        $type['data']['roles'][BACKDROP_AUTHENTICATED_ROLE] =
          BACKDROP_AUTHENTICATED_ROLE;
      }
    }
    else {
      $type['data']['roles'] = array();
    }
    $config = config('profile.type.' . $type['type']);
    $config_data = array(
      'userview' => TRUE,
      'type' => $type['type'],
      'label' => $type['label'],
      'registration' => $type['data']['registration'],
      'roles' => $type['data']['roles'],
      'weight' => $type['weight'],
      'status' => $type['status'],
      'module' => $type['module'],
      'storage' => 1,
    );
    $config->setData($config_data);
    $config->save();
  }

  // Drop the profile_type db table, no longer needed.
  db_drop_table('profile_type');

  // Backdrop's standard upgrade process converted the Profile2 bundles and
  // their fields to the new config style, but it left their entity_type as
  // 'profile2', whereas this module uses the entity_type of 'profile'. So we
  // need to further convert config files and db tables.

  // Get Profile2 bundles from config and convert to entity_type profile.
  $config_names = config_get_names_with_prefix('field.bundle.profile2.');
  foreach ($config_names as $config_file) {
    $config = config($config_file);
    $config->setName(str_replace('profile2', 'profile', $config->getName()));
    $config->set('entity_type', 'profile');
    $config->save();

    // Remove the bundle data from the variables table.
    $bundle = $config->get('bundle');
    update_variable_del('field_bundle_settings__' . $bundle);

    // Remove the old bundle config file that contains 'profile2'.
    $old_config = config($config_file);
    $old_config->delete();
  }

  // Get Profile2 field instances from config and convert to entity_type profile.
  $config_names = config_get_names_with_prefix('field.instance.profile2.');
  foreach ($config_names as $config_file) {
    $config = config($config_file);
    $config->setName(str_replace('profile2', 'profile', $config->getName()));
    $config->set('entity_type', 'profile');
    $config->save();

    // The field tables exist (and have data), but their entity_type is left as
    // profile2 after Backdrop does its upgrade, so we need to change that
    // column for the data and revision tables.
    $field_name = $config->get('field_name');
    db_update('field_data_' . $field_name)
      ->fields(array(
        'entity_type' => 'profile',
      ))
      ->condition('entity_type', 'profile2')
      ->execute();
    db_update('field_revision_' . $field_name)
      ->fields(array(
        'entity_type' => 'profile',
      ))
      ->condition('entity_type', 'profile2')
      ->execute();

    // Remove the old field instance config file that contains 'profile2'.
    $old_config = config($config_file);
    $old_config->delete();
  }

  // Remove the residue of the D7 Profile2 module.
  db_query("
    DELETE FROM {system}
    WHERE name = 'profile2'
    AND type = 'module'");
}
